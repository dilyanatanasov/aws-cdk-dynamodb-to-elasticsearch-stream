"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const aws_sdk_1 = require("aws-sdk");
const { Client } = require('@elastic/elasticsearch');
exports.handler = async (event) => {
    const node = process.env.ES_DOMAIN;
    const index = process.env.ES_INDEX;
    console.log("DynamoDB to ES synchronize event triggered");
    console.log("Received event object:", event);
    console.log("ES domain to use:", node);
    console.log("ES index to use:", index);
    if (!event["Records"]) {
        console.log("No records to process. Exiting");
        return;
    }
    const auth = process.env.ES_PASSWORD ? {
        username: 'admin',
        password: process.env.ES_PASSWORD,
    } : undefined;
    const client = new Client({
        node: `https://${node}`,
        auth,
    });
    for (const record of event
        .Records
        .filter((record) => record.dynamodb)) {
        try {
            let result;
            const keys = record.dynamodb.Keys;
            console.log(JSON.stringify(record));
            const id = keys === null || keys === void 0 ? void 0 : keys[process.env.PK].S;
            if (!id) {
                console.log(`Can not detect the ID of the document to index. Make sure the DynamoDB document has a field called '${process.env.PK}'`);
                continue;
            }
            if (record.eventName === "REMOVE") {
                console.log("Deleting document: " + id);
                result = await client.delete({
                    index,
                    id,
                });
            }
            else {
                if (!record.dynamodb.NewImage) {
                    console.log("Trying to index new document but the DynamoDB stream event did not provide the NewImage. Skipping...");
                    continue;
                }
                console.log("Indexing document: " + id);
                const convertedDocument = aws_sdk_1.DynamoDB.Converter.output({ "M": record.dynamodb.NewImage });
                console.log("The full object to store is: ", convertedDocument);
                result = await client.index({
                    index,
                    id,
                    body: convertedDocument,
                });
            }
            console.log(result);
        }
        catch (e) {
            console.error("Failed to process DynamoDB row");
            console.error(record);
            console.error(e);
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyZWFtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic3RyZWFtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLHFDQUFpQztBQUVqQyxNQUFNLEVBQUMsTUFBTSxFQUFDLEdBQUcsT0FBTyxDQUFDLHdCQUF3QixDQUFDLENBQUE7QUFFckMsUUFBQSxPQUFPLEdBQUcsS0FBSyxFQUFFLEtBQTBCLEVBQUUsRUFBRTtJQUN4RCxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQW1CLENBQUM7SUFDN0MsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFrQixDQUFDO0lBRTdDLE9BQU8sQ0FBQyxHQUFHLENBQUMsNENBQTRDLENBQUMsQ0FBQztJQUMxRCxPQUFPLENBQUMsR0FBRyxDQUFDLHdCQUF3QixFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzdDLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUV2QyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFFO1FBQ25CLE9BQU8sQ0FBQyxHQUFHLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUM5QyxPQUFPO0tBQ1Y7SUFFRCxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7UUFDbkMsUUFBUSxFQUFFLE9BQU87UUFDakIsUUFBUSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVztLQUNwQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFFZCxNQUFNLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQztRQUN0QixJQUFJLEVBQUUsV0FBVyxJQUFJLEVBQUU7UUFDdkIsSUFBSTtLQUNQLENBQUMsQ0FBQztJQUVILEtBQUssTUFBTSxNQUFNLElBQUksS0FBSztTQUNyQixPQUFPO1NBQ1AsTUFBTSxDQUFDLENBQUMsTUFBVyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDM0MsSUFBSTtZQUNBLElBQUksTUFBTSxDQUFDO1lBRVgsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLFFBQVMsQ0FBQyxJQUFJLENBQUM7WUFFbkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFFcEMsTUFBTSxFQUFFLEdBQUcsSUFBSSxhQUFKLElBQUksdUJBQUosSUFBSSxDQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRyxFQUFFLENBQUMsQ0FBQztZQUVyQyxJQUFJLENBQUMsRUFBRSxFQUFFO2dCQUNMLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUdBQXVHLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztnQkFDdEksU0FBUzthQUNaO1lBRUQsSUFBSSxNQUFNLENBQUMsU0FBUyxLQUFLLFFBQVEsRUFBRTtnQkFDL0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsR0FBRyxFQUFFLENBQUMsQ0FBQztnQkFDeEMsTUFBTSxHQUFHLE1BQU0sTUFBTSxDQUFDLE1BQU0sQ0FBQztvQkFDekIsS0FBSztvQkFDTCxFQUFFO2lCQUNMLENBQUMsQ0FBQzthQUNOO2lCQUFNO2dCQUNILElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUyxDQUFDLFFBQVEsRUFBRTtvQkFDNUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxzR0FBc0csQ0FBQyxDQUFDO29CQUNwSCxTQUFTO2lCQUNaO2dCQUVELE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLEdBQUcsRUFBRSxDQUFDLENBQUM7Z0JBQ3hDLE1BQU0saUJBQWlCLEdBQUcsa0JBQVEsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxRQUFTLENBQUMsUUFBUSxFQUFDLENBQUMsQ0FBQztnQkFDdEYsT0FBTyxDQUFDLEdBQUcsQ0FBQywrQkFBK0IsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO2dCQUNoRSxNQUFNLEdBQUcsTUFBTSxNQUFNLENBQUMsS0FBSyxDQUFDO29CQUN4QixLQUFLO29CQUNMLEVBQUU7b0JBQ0YsSUFBSSxFQUFFLGlCQUFpQjtpQkFDMUIsQ0FBQyxDQUFBO2FBQ0w7WUFFRCxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3ZCO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDUixPQUFPLENBQUMsS0FBSyxDQUFDLGdDQUFnQyxDQUFDLENBQUM7WUFDaEQsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN0QixPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3BCO0tBRUo7QUFDTCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0R5bmFtb0RCU3RyZWFtRXZlbnR9IGZyb20gXCJhd3MtbGFtYmRhXCI7XG5pbXBvcnQge0R5bmFtb0RCfSBmcm9tIFwiYXdzLXNka1wiO1xuXG5jb25zdCB7Q2xpZW50fSA9IHJlcXVpcmUoJ0BlbGFzdGljL2VsYXN0aWNzZWFyY2gnKVxuXG5leHBvcnQgY29uc3QgaGFuZGxlciA9IGFzeW5jIChldmVudDogRHluYW1vREJTdHJlYW1FdmVudCkgPT4ge1xuICAgIGNvbnN0IG5vZGUgPSBwcm9jZXNzLmVudi5FU19ET01BSU4gYXMgc3RyaW5nO1xuICAgIGNvbnN0IGluZGV4ID0gcHJvY2Vzcy5lbnYuRVNfSU5ERVggYXMgc3RyaW5nO1xuXG4gICAgY29uc29sZS5sb2coXCJEeW5hbW9EQiB0byBFUyBzeW5jaHJvbml6ZSBldmVudCB0cmlnZ2VyZWRcIik7XG4gICAgY29uc29sZS5sb2coXCJSZWNlaXZlZCBldmVudCBvYmplY3Q6XCIsIGV2ZW50KTtcbiAgICBjb25zb2xlLmxvZyhcIkVTIGRvbWFpbiB0byB1c2U6XCIsIG5vZGUpO1xuICAgIGNvbnNvbGUubG9nKFwiRVMgaW5kZXggdG8gdXNlOlwiLCBpbmRleCk7XG5cbiAgICBpZiAoIWV2ZW50W1wiUmVjb3Jkc1wiXSkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIk5vIHJlY29yZHMgdG8gcHJvY2Vzcy4gRXhpdGluZ1wiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGF1dGggPSBwcm9jZXNzLmVudi5FU19QQVNTV09SRCA/IHtcbiAgICAgICAgdXNlcm5hbWU6ICdhZG1pbicsXG4gICAgICAgIHBhc3N3b3JkOiBwcm9jZXNzLmVudi5FU19QQVNTV09SRCxcbiAgICB9IDogdW5kZWZpbmVkO1xuXG4gICAgY29uc3QgY2xpZW50ID0gbmV3IENsaWVudCh7XG4gICAgICAgIG5vZGU6IGBodHRwczovLyR7bm9kZX1gLFxuICAgICAgICBhdXRoLFxuICAgIH0pO1xuXG4gICAgZm9yIChjb25zdCByZWNvcmQgb2YgZXZlbnRcbiAgICAgICAgLlJlY29yZHNcbiAgICAgICAgLmZpbHRlcigocmVjb3JkOiBhbnkpID0+IHJlY29yZC5keW5hbW9kYikpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxldCByZXN1bHQ7XG5cbiAgICAgICAgICAgIGNvbnN0IGtleXMgPSByZWNvcmQuZHluYW1vZGIhLktleXM7XG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KHJlY29yZCkpO1xuXG4gICAgICAgICAgICBjb25zdCBpZCA9IGtleXM/Lltwcm9jZXNzLmVudi5QSyFdLlM7XG5cbiAgICAgICAgICAgIGlmICghaWQpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgQ2FuIG5vdCBkZXRlY3QgdGhlIElEIG9mIHRoZSBkb2N1bWVudCB0byBpbmRleC4gTWFrZSBzdXJlIHRoZSBEeW5hbW9EQiBkb2N1bWVudCBoYXMgYSBmaWVsZCBjYWxsZWQgJyR7cHJvY2Vzcy5lbnYuUEt9J2ApO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocmVjb3JkLmV2ZW50TmFtZSA9PT0gXCJSRU1PVkVcIikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRGVsZXRpbmcgZG9jdW1lbnQ6IFwiICsgaWQpO1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGF3YWl0IGNsaWVudC5kZWxldGUoe1xuICAgICAgICAgICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICghcmVjb3JkLmR5bmFtb2RiIS5OZXdJbWFnZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlRyeWluZyB0byBpbmRleCBuZXcgZG9jdW1lbnQgYnV0IHRoZSBEeW5hbW9EQiBzdHJlYW0gZXZlbnQgZGlkIG5vdCBwcm92aWRlIHRoZSBOZXdJbWFnZS4gU2tpcHBpbmcuLi5cIik7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiSW5kZXhpbmcgZG9jdW1lbnQ6IFwiICsgaWQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnZlcnRlZERvY3VtZW50ID0gRHluYW1vREIuQ29udmVydGVyLm91dHB1dCh7XCJNXCI6IHJlY29yZC5keW5hbW9kYiEuTmV3SW1hZ2V9KTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlRoZSBmdWxsIG9iamVjdCB0byBzdG9yZSBpczogXCIsIGNvbnZlcnRlZERvY3VtZW50KTtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBhd2FpdCBjbGllbnQuaW5kZXgoe1xuICAgICAgICAgICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IGNvbnZlcnRlZERvY3VtZW50LFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3VsdCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gcHJvY2VzcyBEeW5hbW9EQiByb3dcIik7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKHJlY29yZCk7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICB9XG5cbiAgICB9XG59O1xuIl19